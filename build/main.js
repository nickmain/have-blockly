// Generated by Haxe 4.0.0 (git build development @ 3018ab1)
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		return this.attributeMap.keys();
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var blockly_model_Toolbox = $hxClasses["blockly.model.Toolbox"] = { __ename__ : ["blockly","model","Toolbox"], __constructs__ : ["FlatToolbox","TreeToolbox"] };
blockly_model_Toolbox.FlatToolbox = function(items) { var $x = ["FlatToolbox",0,items]; $x.__enum__ = blockly_model_Toolbox; $x.toString = $estr; return $x; };
blockly_model_Toolbox.TreeToolbox = function(items) { var $x = ["TreeToolbox",1,items]; $x.__enum__ = blockly_model_Toolbox; $x.toString = $estr; return $x; };
var blockly_model_Categories = $hxClasses["blockly.model.Categories"] = { __ename__ : ["blockly","model","Categories"], __constructs__ : ["Category","Separator"] };
blockly_model_Categories.Category = function(name,colour,subcategories,blocks) { var $x = ["Category",0,name,colour,subcategories,blocks]; $x.__enum__ = blockly_model_Categories; $x.toString = $estr; return $x; };
blockly_model_Categories.Separator = ["Separator",1];
blockly_model_Categories.Separator.toString = $estr;
blockly_model_Categories.Separator.__enum__ = blockly_model_Categories;
var blockly_model_Blocks = $hxClasses["blockly.model.Blocks"] = { __ename__ : ["blockly","model","Blocks"], __constructs__ : ["Block","Button","Gap"] };
blockly_model_Blocks.Block = function(block) { var $x = ["Block",0,block]; $x.__enum__ = blockly_model_Blocks; $x.toString = $estr; return $x; };
blockly_model_Blocks.Button = function(text) { var $x = ["Button",1,text]; $x.__enum__ = blockly_model_Blocks; $x.toString = $estr; return $x; };
blockly_model_Blocks.Gap = function(gap) { var $x = ["Gap",2,gap]; $x.__enum__ = blockly_model_Blocks; $x.toString = $estr; return $x; };
var blockly_model_BlockModel = $hxClasses["blockly.model.BlockModel"] = { __ename__ : ["blockly","model","BlockModel"], __constructs__ : ["Block","BlockType","BlockMin"] };
blockly_model_BlockModel.Block = function(type,id,disabled,collapsed,editable,movable,inlined,deletable,mutation,comment,next,data,inputs,fields) { var $x = ["Block",0,type,id,disabled,collapsed,editable,movable,inlined,deletable,mutation,comment,next,data,inputs,fields]; $x.__enum__ = blockly_model_BlockModel; $x.toString = $estr; return $x; };
blockly_model_BlockModel.BlockType = function(type) { var $x = ["BlockType",1,type]; $x.__enum__ = blockly_model_BlockModel; $x.toString = $estr; return $x; };
blockly_model_BlockModel.BlockMin = function(type,inputs,fields) { var $x = ["BlockMin",2,type,inputs,fields]; $x.__enum__ = blockly_model_BlockModel; $x.toString = $estr; return $x; };
var blockly_model_InputModel = $hxClasses["blockly.model.InputModel"] = { __ename__ : ["blockly","model","InputModel"], __constructs__ : ["ValueInput","Statement"] };
blockly_model_InputModel.ValueInput = function(name,block,shadow) { var $x = ["ValueInput",0,name,block,shadow]; $x.__enum__ = blockly_model_InputModel; $x.toString = $estr; return $x; };
blockly_model_InputModel.Statement = function(name,block) { var $x = ["Statement",1,name,block]; $x.__enum__ = blockly_model_InputModel; $x.toString = $estr; return $x; };
var app_DemoToolbox = function() { };
$hxClasses["app.DemoToolbox"] = app_DemoToolbox;
app_DemoToolbox.__name__ = ["app","DemoToolbox"];
app_DemoToolbox.toXml = function() {
	return blockly_model_ToolboxS12.serialize(app_DemoToolbox.toolbox);
};
app_DemoToolbox.toString = function() {
	return haxe_xml_Printer.print(app_DemoToolbox.toXml());
};
var app_Main = function() {
	this.application = new blockly_BlocklyApp();
	this.application.registerBlock(app_blocks_FooBarBlock);
	this.application.registerBlock(app_blocks_DemoQuestions);
	app_blocks_KitchenSink.register(this.application);
	var blocklyArea = window.document.getElementById("blocklyArea");
	var blocklyDiv = window.document.getElementById("blocklyDiv");
	this.application.inject("blocklyDiv",new blockly_BlocklyConfig().setMediaPath("media/").setToolbox(app_DemoToolbox.toString()).setGrid(new blockly_Grid()).setZoom(new blockly_Zoom()).showTrashcan(true));
	var onresize = function(e) {
		var element = blocklyArea;
		var x = 0;
		var y = 0;
		while(true) {
			x += element.offsetLeft;
			y += element.offsetTop;
			element = element.offsetParent;
			if(!(element != null)) {
				break;
			}
		}
		blocklyDiv.style.left = x + "px";
		blocklyDiv.style.top = y + "px";
		blocklyDiv.style.width = blocklyArea.offsetWidth + "px";
		blocklyDiv.style.height = blocklyArea.offsetHeight + "px";
	};
	window.addEventListener("resize",onresize,false);
	onresize(null);
	Blockly.svgResize(this.application.workspace);
	this.resultArea = window.document.getElementById("resultArea");
	this.application.loadWorkspaceFromLocalStorage("demo");
	this.application.workspace.addChangeListener($bind(this,this.workspaceChanged));
};
$hxClasses["app.Main"] = app_Main;
app_Main.__name__ = ["app","Main"];
app_Main.main = function() {
	app_Main.mainApp = new app_Main();
};
app_Main.prototype = {
	workspaceChanged: function(event) {
		var e = blockly_events__$Event_BlocklyEvent_$Impl_$.toEvent(event);
		this.application.workspaceToLocalStorage("demo");
		this.resultArea.innerText = this.application.workspaceToPrettyXML();
	}
	,__class__: app_Main
};
var blockly_CustomBlock = function(block,application) {
	this.block = block;
	this.application = application;
	block.customContextMenu = $bind(this,this.customContextMenu);
};
$hxClasses["blockly.CustomBlock"] = blockly_CustomBlock;
blockly_CustomBlock.__name__ = ["blockly","CustomBlock"];
blockly_CustomBlock.prototype = {
	customContextMenu: function(menuOptions) {
	}
	,validate: function() {
	}
	,domToMutation: function(xmlElement) {
	}
	,mutationToDom: function() {
		return null;
	}
	,decompose: function(workspace) {
		return null;
	}
	,compose: function(containerBlock) {
	}
	,saveConnections: function(containerBlock) {
	}
	,onChange: function(event) {
	}
	,getPreviousBlock: function() {
		if(this.block.previousConnection == null) {
			return null;
		}
		return this.block.previousConnection.targetBlock();
	}
	,getNextBlock: function() {
		if(this.block.nextConnection == null) {
			return null;
		}
		return this.block.nextConnection.targetBlock();
	}
	,getOutputBlock: function() {
		if(this.block.outputConnection == null) {
			return null;
		}
		return this.block.outputConnection.targetBlock();
	}
	,getInputBlock: function(inputName) {
		var input = this.block.getInput(inputName);
		if(input == null) {
			return null;
		}
		return input.connection.targetBlock();
	}
	,attachBlock: function(inputName,blockType) {
		var input = this.block.getInput(inputName);
		var newBlock = this.block.workspace.newBlock(blockType);
		input.connection.connect(newBlock.outputConnection);
		newBlock.initSvg();
		newBlock.render(true);
		return newBlock;
	}
	,detachBlock: function(inputName) {
		var otherBlock = this.getInputBlock(inputName);
		if(otherBlock != null) {
			otherBlock.unplug(true,true);
		}
		return otherBlock;
	}
	,appendLabelledField: function(label,field,fieldName,inputName) {
		return this.block.appendDummyInput(inputName).appendField(label).appendField(field,fieldName);
	}
	,appendField: function(field,fieldName) {
		return this.block.appendDummyInput().appendField(field,fieldName);
	}
	,__class__: blockly_CustomBlock
};
var app_blocks_DemoQuestions = function(block,application) {
	var _gthis = this;
	blockly_CustomBlock.call(this,block,application);
	this.builder = new blockly_model_BlockBuilder(block);
	var tmp = blockly_model_Validator.Callback("check1",function(newValue) {
		if(newValue) {
			_gthis.builder.addInputs([blockly_model_InputDef.LabelledField("Controlled by first checkbox",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.CheckBox("check5",false))]);
		} else {
			block.removeInput("check5",true);
		}
		return newValue;
	});
	this.builder.build({ connections : { topType : null, bottomType : null, outType : blockly_model_ValueType.AnyType}, inlining : blockly_model_Inlining.Automatic, colour : blockly_model_BlockColour.RGBColour("#ff0000"), tooltip : blockly_model_Tooltip.Fixed("Some possible choices"), warning : null, help : null, inputs : [blockly_model_InputDef.LabelledField("You can choose this",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.CheckBox("check1",false)),blockly_model_InputDef.LabelledField("You can also choose this",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.CheckBox("check2",true)),blockly_model_InputDef.LabelledField("This is another option",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.CheckBox("check3",false)),blockly_model_InputDef.LabelledField("Or you can choose this one",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.CheckBox("check4",false))], validators : [tmp]});
};
$hxClasses["app.blocks.DemoQuestions"] = app_blocks_DemoQuestions;
app_blocks_DemoQuestions.__name__ = ["app","blocks","DemoQuestions"];
app_blocks_DemoQuestions.__super__ = blockly_CustomBlock;
app_blocks_DemoQuestions.prototype = $extend(blockly_CustomBlock.prototype,{
	__class__: app_blocks_DemoQuestions
});
var app_blocks_FooBarBlock = function(block,application) {
	this.count = 1;
	var _gthis = this;
	blockly_CustomBlock.call(this,block,application);
	var tmp = blockly_model_Tooltip.Computed(function() {
		return "Hello World !\nThis is going to be interesting\n" + _gthis.count++;
	});
	new blockly_model_BlockBuilder(block).build({ connections : { topType : null, bottomType : blockly_model_ValueType.AnyType, outType : null}, inlining : blockly_model_Inlining.Automatic, colour : blockly_model_BlockColour.RGBColour("#cc88ff"), tooltip : tmp, warning : null, help : null, inputs : [blockly_model_InputDef.Dummy("toprow",blockly_model_FieldAlignment.Left,[blockly_model_FieldDef.CheckBox("check",false),blockly_model_FieldDef.TextLabel("Hello World")]),blockly_model_InputDef.Statement("stat1",blockly_model_ValueType.AnyType,blockly_model_FieldAlignment.Left,[]),blockly_model_InputDef.Value("inp1",blockly_model_ValueType.AnyType,blockly_model_FieldAlignment.Left,[blockly_model_FieldDef.StyledLabel("Hello World","svgDarkText")])], validators : []});
};
$hxClasses["app.blocks.FooBarBlock"] = app_blocks_FooBarBlock;
app_blocks_FooBarBlock.__name__ = ["app","blocks","FooBarBlock"];
app_blocks_FooBarBlock.__super__ = blockly_CustomBlock;
app_blocks_FooBarBlock.prototype = $extend(blockly_CustomBlock.prototype,{
	__class__: app_blocks_FooBarBlock
});
var app_blocks_KitchenSink = function(block,application) {
	this.extraInputs = [];
	this.hasOut = true;
	this.hasPrev = true;
	blockly_CustomBlock.call(this,block,application);
	this.builder = new blockly_model_BlockBuilder(block);
	this.builder.build({ connections : { topType : blockly_model_ValueType.AnyType, bottomType : blockly_model_ValueType.AnyType, outType : blockly_model_ValueType.BoolType}, inlining : blockly_model_Inlining.Automatic, colour : blockly_model_BlockColour.RGBColour(app_blocks_KitchenSink.DEFAULT_COLOR), tooltip : blockly_model_Tooltip.Fixed("All fields except the kitchen sink"), warning : "There are things yet to do !", help : "http://blog.nickmain.com", inputs : [blockly_model_InputDef.Dummy("toprow",blockly_model_FieldAlignment.Left,[]),blockly_model_InputDef.Dummy("image",blockly_model_FieldAlignment.Center,[blockly_model_FieldDef.Image("haxe.png",100,25,"Haxe Logo")]),blockly_model_InputDef.LabelledField("A Checkbox",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.CheckBox("check1",false)),blockly_model_InputDef.LabelledField("Text Field",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.TextInput("text1","some text")),blockly_model_InputDef.LabelledField("Spellchecked",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.SpellcheckedTextInput("textspell","some text")),blockly_model_InputDef.LabelledField("Even 0..10",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.Numeric("numfield",2,0,10,2)),blockly_model_InputDef.LabelledField("Angle Field",blockly_model_FieldAlignment.Left,blockly_model_FieldDef.Angle("angle1",45)),blockly_model_InputDef.LabelledField("Colour",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.Colour("color1","#ffff00")),blockly_model_InputDef.LabelledField("Custom Colours",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.CustomColours("color2","#ffd700",3,["#ffffe0","#ffff00","#ffd700","#eedd82","#daa520","#b8860b"])),blockly_model_InputDef.LabelledField("Drop Down Menu",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.DropDown("menu1","BAR",[["foo","FOO"],["bar","BAR"],["bat","BAT"]])),blockly_model_InputDef.LabelledField("Generated Menu",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.DropDownGen("menu2",null,$bind(this,this.randomMenu))),blockly_model_InputDef.LabelledField("Variable",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.Variable("var1","foo")),blockly_model_InputDef.Value("input1",blockly_model_ValueType.AnyType,blockly_model_FieldAlignment.Right,[blockly_model_FieldDef.CheckBox("checkX",false)])], validators : [blockly_model_Validator.Callback("checkX",$bind(this,this.funkyCheckInput))]});
	block.setCommentText("Everything but the kitchen sink.");
	block.data = "This is some metadata";
	block.setMutator(new Blockly.Mutator(["app.blocks.KitchenSinkMutatorInput"]));
};
$hxClasses["app.blocks.KitchenSink"] = app_blocks_KitchenSink;
app_blocks_KitchenSink.__name__ = ["app","blocks","KitchenSink"];
app_blocks_KitchenSink.register = function(app1) {
	app1.registerBlock(app_blocks_KitchenSink);
	app1.registerBlock(app_blocks_KitchenSinkMutator);
	app1.registerBlock(app_blocks_KitchenSinkMutatorInput);
};
app_blocks_KitchenSink.__super__ = blockly_CustomBlock;
app_blocks_KitchenSink.prototype = $extend(blockly_CustomBlock.prototype,{
	customContextMenu: function(menuOptions) {
		var _gthis = this;
		menuOptions.push({ text : this.block.isEditable() ? "Make uneditable" : "Make editable", enabled : true, callback : function() {
			_gthis.block.setEditable(!_gthis.block.isEditable());
		}});
	}
	,funkyCheckInput: function(checked) {
		if(checked) {
			var inputBlock = this.getInputBlock("input1");
			if(inputBlock == null) {
				inputBlock = this.attachBlock("input1","text");
				inputBlock.setFieldValue("Hello World","TEXT");
			}
		} else {
			var inputBlock1 = this.detachBlock("input1");
			if(inputBlock1 != null) {
				inputBlock1.setWarningText("Unplugged - discard at your leisure");
				inputBlock1.warning.setVisible(true);
				inputBlock1.setDisabled(true);
			}
		}
		return checked;
	}
	,randomMenu: function() {
		var opts = [];
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			var opt = "# " + Math.round(Math.random() * 1000);
			opts.push([opt,opt]);
		}
		console.log("KitchenSink.hx:107:",opts);
		return opts;
	}
	,checkboxChanged: function(state) {
		var req = new XMLHttpRequest();
		req.overrideMimeType("text/xml");
		req.open("POST","http://127.0.0.1:5000/save",true);
		req.send(this.application.workspaceToPrettyXML());
		return state;
	}
	,onChange: function(event) {
		if(this.getPreviousBlock() != null) {
			this.builder.setConnections({ topType : blockly_model_ValueType.AnyType, bottomType : blockly_model_ValueType.AnyType, outType : null});
			this.hasOut = false;
			this.hasPrev = true;
		} else if(this.getOutputBlock() != null) {
			this.builder.setConnections({ topType : null, bottomType : blockly_model_ValueType.AnyType, outType : blockly_model_ValueType.BoolType});
			this.hasOut = true;
			this.hasPrev = false;
		} else {
			this.builder.setConnections({ topType : blockly_model_ValueType.AnyType, bottomType : blockly_model_ValueType.AnyType, outType : blockly_model_ValueType.BoolType});
			this.hasOut = true;
			this.hasPrev = true;
		}
	}
	,domToMutation: function(e) {
		this.hasPrev = e.getAttribute("has_prev") == "true";
		this.hasOut = e.getAttribute("has_out") == "true";
		var color = e.getAttribute("color");
		if(color != null) {
			this.block.setColour(color);
		}
		var extras = e.getAttribute("extras");
		if(extras != null) {
			var des = new haxe_Unserializer(extras);
			this.extraInputs = des.unserialize();
			var inputNum = 0;
			var _g = 0;
			var _g1 = this.extraInputs;
			while(_g < _g1.length) {
				var exin = _g1[_g];
				++_g;
				var inp = this.block.appendValueInput("extra" + inputNum++);
				inp.setAlign(Blockly.ALIGN_RIGHT);
				inp.appendField(exin);
			}
		} else {
			this.extraInputs = [];
		}
		this.builder.setConnections({ topType : this.hasPrev ? blockly_model_ValueType.AnyType : null, bottomType : blockly_model_ValueType.AnyType, outType : this.hasOut ? blockly_model_ValueType.BoolType : null});
	}
	,mutationToDom: function() {
		var container = window.document.createElement("mutation");
		container.setAttribute("has_prev","" + Std.string(this.hasPrev));
		container.setAttribute("has_out","" + Std.string(this.hasOut));
		if(this.block.getColour() != app_blocks_KitchenSink.DEFAULT_COLOR) {
			container.setAttribute("color",this.block.getColour());
		}
		if(this.extraInputs.length > 0) {
			var serializer = new haxe_Serializer();
			serializer.serialize(this.extraInputs);
			container.setAttribute("extras",serializer.toString());
		}
		return container;
	}
	,decompose: function(workspace) {
		var containerBlock = workspace.newBlock("app.blocks.KitchenSinkMutator");
		containerBlock.setFieldValue(this.block.getColour(),"color1");
		containerBlock.initSvg();
		var lastBlock = containerBlock.nextConnection;
		var _g = 0;
		var _g1 = this.extraInputs;
		while(_g < _g1.length) {
			var exin = _g1[_g];
			++_g;
			var extraInput = workspace.newBlock("app.blocks.KitchenSinkMutatorInput");
			extraInput.setFieldValue(exin,"label");
			extraInput.initSvg();
			lastBlock.connect(extraInput.previousConnection);
			lastBlock = extraInput.nextConnection;
		}
		return containerBlock;
	}
	,compose: function(container) {
		var color = container.getFieldValue("color1");
		if(color != null && color != this.block.getColour()) {
			this.block.setColour(color);
		}
		this.extraInputs = [];
		var inputNum = 0;
		while(true) {
			var name = "extra" + inputNum++;
			var anInput = this.block.getInput(name);
			if(anInput == null) {
				break;
			}
			this.block.removeInput(name);
		}
		inputNum = 0;
		var nextBlock = container.nextConnection.targetBlock();
		while(nextBlock != null) {
			var label = nextBlock.getFieldValue("label");
			this.extraInputs.push(label);
			var name1 = "extra" + inputNum++;
			var inp = this.block.appendValueInput(name1);
			inp.setAlign(Blockly.ALIGN_RIGHT);
			inp.appendField(label);
			var ksim = nextBlock;
			if(ksim.targetConnection != null) {
				Blockly.Mutator.reconnect(ksim.targetConnection,this.block,name1);
			}
			nextBlock = nextBlock.nextConnection.targetBlock();
		}
	}
	,saveConnections: function(containerBlock) {
		var inputNum = 0;
		var nextBlock = containerBlock.nextConnection.targetBlock();
		while(nextBlock != null) {
			var inp = this.block.getInput("extra" + inputNum++);
			if(inp == null) {
				break;
			}
			var ksim = nextBlock;
			ksim.targetConnection = inp.connection.targetConnection;
			nextBlock = nextBlock.nextConnection.targetBlock();
		}
	}
	,__class__: app_blocks_KitchenSink
});
var app_blocks_KitchenSinkMutator = function(block,application) {
	blockly_CustomBlock.call(this,block,application);
	new blockly_model_BlockBuilder(block).build({ connections : { topType : null, bottomType : blockly_model_ValueType.AnyType, outType : null}, inlining : blockly_model_Inlining.Automatic, colour : blockly_model_BlockColour.RGBColour("#999999"), tooltip : blockly_model_Tooltip.Fixed("Customize the KitchenSink block"), warning : null, help : "http://blog.nickmain.com", inputs : [blockly_model_InputDef.LabelledField("Kitchen Sink",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.Colour("color1","#ffff00"))], validators : []});
};
$hxClasses["app.blocks.KitchenSinkMutator"] = app_blocks_KitchenSinkMutator;
app_blocks_KitchenSinkMutator.__name__ = ["app","blocks","KitchenSinkMutator"];
app_blocks_KitchenSinkMutator.__super__ = blockly_CustomBlock;
app_blocks_KitchenSinkMutator.prototype = $extend(blockly_CustomBlock.prototype,{
	__class__: app_blocks_KitchenSinkMutator
});
var app_blocks_KitchenSinkMutatorInput = function(block,application) {
	blockly_CustomBlock.call(this,block,application);
	new blockly_model_BlockBuilder(block).build({ connections : { topType : blockly_model_ValueType.AnyType, bottomType : blockly_model_ValueType.AnyType, outType : null}, inlining : blockly_model_Inlining.Automatic, colour : blockly_model_BlockColour.RGBColour("#b0b0b0"), tooltip : blockly_model_Tooltip.Fixed("Add an input to the Kitchen Sink"), warning : null, help : "http://blog.nickmain.com", inputs : [blockly_model_InputDef.LabelledField("Input",blockly_model_FieldAlignment.Left,blockly_model_FieldDef.TextInput("label","LABEL"))], validators : []});
};
$hxClasses["app.blocks.KitchenSinkMutatorInput"] = app_blocks_KitchenSinkMutatorInput;
app_blocks_KitchenSinkMutatorInput.__name__ = ["app","blocks","KitchenSinkMutatorInput"];
app_blocks_KitchenSinkMutatorInput.__super__ = blockly_CustomBlock;
app_blocks_KitchenSinkMutatorInput.prototype = $extend(blockly_CustomBlock.prototype,{
	__class__: app_blocks_KitchenSinkMutatorInput
});
var blockly_BlocklyApp = function() {
};
$hxClasses["blockly.BlocklyApp"] = blockly_BlocklyApp;
blockly_BlocklyApp.__name__ = ["blockly","BlocklyApp"];
blockly_BlocklyApp.prototype = {
	inject: function(divId,config) {
		this.divId = divId;
		this.workspace = Blockly.inject(divId,config);
	}
	,workspaceToPrettyXML: function() {
		return Blockly.Xml.domToPrettyText(Blockly.Xml.workspaceToDom(this.workspace));
	}
	,workspaceToLocalStorage: function(key) {
		var xml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(this.workspace));
		window.localStorage.setItem(key,xml);
		return xml;
	}
	,loadWorkspaceFromLocalStorage: function(key) {
		var xml = window.localStorage.getItem(key);
		if(xml == null) {
			return false;
		}
		Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(xml),this.workspace);
		return true;
	}
	,registerBlock: function(clazz) {
		var blocklyApp = this;
		Blockly.Blocks[Type.getClassName(clazz)] = { init : function() {
			this.haxeBlock = new clazz(this,blocklyApp);
		}, validate : function() {
			var haxeBlock = this.haxeBlock;
			haxeBlock.validate();
		}, domToMutation : function(xmlElement) {
			var haxeBlock1 = this.haxeBlock;
			haxeBlock1.domToMutation(xmlElement);
		}, mutationToDom : function() {
			var haxeBlock2 = this.haxeBlock;
			return haxeBlock2.mutationToDom();
		}, decompose : function(workspace) {
			var haxeBlock3 = this.haxeBlock;
			return haxeBlock3.decompose(workspace);
		}, compose : function(containerBlock) {
			var haxeBlock4 = this.haxeBlock;
			haxeBlock4.compose(containerBlock);
		}, saveConnections : function(containerBlock1) {
			var haxeBlock5 = this.haxeBlock;
			haxeBlock5.saveConnections(containerBlock1);
		}, onchange : function(event) {
			var haxeBlock6 = this.haxeBlock;
			haxeBlock6.onChange(event);
		}};
	}
	,__class__: blockly_BlocklyApp
};
var blockly_Grid = function() {
	this.snap = true;
	this.colour = "#ccc";
	this.length = 3;
	this.spacing = 20;
};
$hxClasses["blockly.Grid"] = blockly_Grid;
blockly_Grid.__name__ = ["blockly","Grid"];
blockly_Grid.prototype = {
	__class__: blockly_Grid
};
var blockly_Zoom = function() {
	this.scaleSpeed = 1.2;
	this.minScale = 0.3;
	this.maxScale = 3;
	this.startScale = 1.0;
	this.wheel = true;
	this.controls = true;
};
$hxClasses["blockly.Zoom"] = blockly_Zoom;
blockly_Zoom.__name__ = ["blockly","Zoom"];
blockly_Zoom.prototype = {
	__class__: blockly_Zoom
};
var blockly_BlocklyConfig = function() {
};
$hxClasses["blockly.BlocklyConfig"] = blockly_BlocklyConfig;
blockly_BlocklyConfig.__name__ = ["blockly","BlocklyConfig"];
blockly_BlocklyConfig.prototype = {
	setMediaPath: function(path) {
		this.media = path;
		return this;
	}
	,setGrid: function(grid) {
		this.grid = grid;
		return this;
	}
	,showTrashcan: function(show) {
		this.trashcan = show;
		return this;
	}
	,setZoom: function(zoom) {
		this.zoom = zoom;
		return this;
	}
	,setToolbox: function(xml) {
		this.toolbox = xml;
		return this;
	}
	,__class__: blockly_BlocklyConfig
};
var blockly_events_Event = $hxClasses["blockly.events.Event"] = { __ename__ : ["blockly","events","Event"], __constructs__ : ["Change","Create","Delete","Move","UI","Unknown"] };
blockly_events_Event.Change = function(event) { var $x = ["Change",0,event]; $x.__enum__ = blockly_events_Event; $x.toString = $estr; return $x; };
blockly_events_Event.Create = function(event) { var $x = ["Create",1,event]; $x.__enum__ = blockly_events_Event; $x.toString = $estr; return $x; };
blockly_events_Event.Delete = function(event) { var $x = ["Delete",2,event]; $x.__enum__ = blockly_events_Event; $x.toString = $estr; return $x; };
blockly_events_Event.Move = function(event) { var $x = ["Move",3,event]; $x.__enum__ = blockly_events_Event; $x.toString = $estr; return $x; };
blockly_events_Event.UI = function(event) { var $x = ["UI",4,event]; $x.__enum__ = blockly_events_Event; $x.toString = $estr; return $x; };
blockly_events_Event.Unknown = function(event) { var $x = ["Unknown",5,event]; $x.__enum__ = blockly_events_Event; $x.toString = $estr; return $x; };
var blockly_events__$Event_BlocklyEvent_$Impl_$ = {};
$hxClasses["blockly.events._Event.BlocklyEvent_Impl_"] = blockly_events__$Event_BlocklyEvent_$Impl_$;
blockly_events__$Event_BlocklyEvent_$Impl_$.__name__ = ["blockly","events","_Event","BlocklyEvent_Impl_"];
blockly_events__$Event_BlocklyEvent_$Impl_$.toEvent = function(this1) {
	if(this1.type == Blockly.Events.CHANGE) {
		return blockly_events_Event.Change(this1);
	}
	if(this1.type == Blockly.Events.CREATE) {
		return blockly_events_Event.Create(this1);
	}
	if(this1.type == Blockly.Events.DELETE) {
		return blockly_events_Event.Delete(this1);
	}
	if(this1.type == Blockly.Events.MOVE) {
		return blockly_events_Event.Move(this1);
	}
	if(this1.type == Blockly.Events.UI) {
		return blockly_events_Event.UI(this1);
	}
	return blockly_events_Event.Unknown(this1);
};
var blockly_model_BlockBuilder = function(block) {
	this.block = block;
};
$hxClasses["blockly.model.BlockBuilder"] = blockly_model_BlockBuilder;
blockly_model_BlockBuilder.__name__ = ["blockly","model","BlockBuilder"];
blockly_model_BlockBuilder.prototype = {
	build: function(def) {
		this.setConnections(def.connections);
		var _g = def.inlining;
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = null;
			break;
		case 1:
			tmp = false;
			break;
		case 2:
			tmp = true;
			break;
		}
		this.block.setInputsInline(tmp);
		var _g1 = def.colour;
		switch(_g1[1]) {
		case 0:
			var value = _g1[2];
			this.block.setColour(value);
			break;
		case 1:
			var value1 = _g1[2];
			this.block.setColour(value1);
			break;
		}
		var _g2 = def.tooltip;
		switch(_g2[1]) {
		case 0:
			var tooltip = _g2[2];
			this.block.setTooltip(tooltip);
			break;
		case 1:
			var generator = _g2[2];
			this.block.setTooltip(generator);
			break;
		}
		this.block.setWarningText(def.warning);
		this.block.setHelpUrl(def.help);
		this.addInputs(def.inputs);
		this.addValidators(def.validators);
	}
	,setConnections: function(connections) {
		if(connections == null) {
			this.block.setPreviousStatement(false);
			this.block.setNextStatement(false);
			this.block.setOutput(false);
			return;
		}
		if(connections.topType != null) {
			this.block.setPreviousStatement(true,this.typeString(connections.topType));
		} else {
			this.block.setPreviousStatement(false);
		}
		if(connections.bottomType != null) {
			this.block.setNextStatement(true,this.typeString(connections.bottomType));
		} else {
			this.block.setNextStatement(false);
		}
		if(connections.outType != null) {
			this.block.setOutput(true,this.typeString(connections.outType));
		} else {
			this.block.setOutput(false);
		}
	}
	,addValidators: function(validators) {
		var _g = 0;
		while(_g < validators.length) {
			var v = validators[_g];
			++_g;
			switch(v[1]) {
			case 0:
				var callback = v[3];
				var fieldName = v[2];
				var f = this.block.getField(fieldName);
				if(f != null) {
					f.setValidator(callback);
				}
				break;
			case 1:
				var fieldName1 = v[2];
				var f1 = this.block.getField(fieldName1);
				if(f1 != null) {
					f1.setValidator(null);
				}
				break;
			}
		}
	}
	,addInputs: function(inputs) {
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			switch(input[1]) {
			case 0:
				var fields = input[4];
				var alignment = input[3];
				var name = input[2];
				var i = this.block.appendDummyInput(name);
				i.setAlign(this.fieldAlignment(alignment));
				this.addFields(i,fields);
				break;
			case 1:
				var field = input[4];
				var alignment1 = input[3];
				var label = input[2];
				var field1 = this.createField(field);
				var i1 = this.block.appendDummyInput(field1.name);
				i1.setAlign(this.fieldAlignment(alignment1));
				i1.appendField(label);
				i1.appendField(field1.field,field1.name);
				break;
			case 2:
				var fields1 = input[5];
				var alignment2 = input[4];
				var type = input[3];
				var name1 = input[2];
				var i2 = this.block.appendValueInput(name1);
				i2.setAlign(this.fieldAlignment(alignment2));
				i2.setCheck(this.typeString(type));
				this.addFields(i2,fields1);
				break;
			case 3:
				var fields2 = input[5];
				var alignment3 = input[4];
				var type1 = input[3];
				var name2 = input[2];
				var i3 = this.block.appendStatementInput(name2);
				i3.setAlign(this.fieldAlignment(alignment3));
				i3.setCheck(this.typeString(type1));
				this.addFields(i3,fields2);
				break;
			}
		}
	}
	,addFields: function(input,fields) {
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var f = this.createField(field);
			input.appendField(f.field,f.name);
		}
	}
	,createField: function(field) {
		switch(field[1]) {
		case 0:
			var text = field[2];
			return { name : null, field : new Blockly.FieldLabel(text)};
		case 1:
			var cssClass = field[3];
			var text1 = field[2];
			return { name : null, field : new Blockly.FieldLabel(text1,cssClass)};
		case 2:
			var text2 = field[3];
			var name = field[2];
			return { name : name, field : new Blockly.FieldTextInput(text2)};
		case 3:
			var text3 = field[3];
			var name1 = field[2];
			var f = new Blockly.FieldTextInput(text3);
			f.setSpellcheck(true);
			return { name : name1, field : f};
		case 4:
			var value = field[3];
			var name2 = field[2];
			return { name : name2, field : new Blockly.FieldAngle("" + value)};
		case 5:
			var options = field[4];
			var value1 = field[3];
			var name3 = field[2];
			var f1 = new Blockly.FieldDropdown(options);
			if(value1 != null) {
				f1.setValue(value1);
			}
			return { name : name3, field : f1};
		case 6:
			var generator = field[4];
			var value2 = field[3];
			var name4 = field[2];
			var f2 = new Blockly.FieldDropdown(generator);
			if(value2 != null) {
				f2.setValue(value2);
			}
			return { name : name4, field : f2};
		case 7:
			var value3 = field[3];
			var name5 = field[2];
			return { name : name5, field : new Blockly.FieldColour(value3)};
		case 8:
			var colours = field[5];
			var cols = field[4];
			var value4 = field[3];
			var name6 = field[2];
			var f3 = new Blockly.FieldColour(value4);
			f3.setColumns(cols);
			f3.setColours(colours);
			return { name : name6, field : f3};
		case 9:
			var value5 = field[3];
			var name7 = field[2];
			return { name : name7, field : new Blockly.FieldCheckbox(value5 ? "TRUE" : "FALSE")};
		case 10:
			var value6 = field[3];
			var name8 = field[2];
			return { name : name8, field : new Blockly.FieldVariable(value6)};
		case 11:
			var alt = field[5];
			var h = field[4];
			var w = field[3];
			var url = field[2];
			return { name : null, field : new Blockly.FieldImage(url,w,h,alt)};
		case 12:
			var precision = field[6];
			var max = field[5];
			var min = field[4];
			var value7 = field[3];
			var name9 = field[2];
			return { name : name9, field : new Blockly.FieldNumber(value7,min,max,precision)};
		case 13:
			var date = field[3];
			var name10 = field[2];
			return { name : name10, field : new Blockly.FieldDate(date)};
		}
	}
	,fieldAlignment: function(alignment) {
		switch(alignment[1]) {
		case 0:
			return Blockly.ALIGN_LEFT;
		case 1:
			return Blockly.ALIGN_RIGHT;
		case 2:
			return Blockly.ALIGN_CENTRE;
		}
	}
	,typeString: function(type) {
		switch(type[1]) {
		case 0:
			return null;
		case 1:
			return "Boolean";
		case 2:
			return "Number";
		case 3:
			return "String";
		case 4:
			return "Array";
		case 5:
			var types = type[2];
			var _g = [];
			var _g1 = 0;
			while(_g1 < types.length) {
				var t = types[_g1];
				++_g1;
				_g.push(this.typeString(t));
			}
			return _g;
		case 6:
			var name = type[2];
			return name;
		}
	}
	,__class__: blockly_model_BlockBuilder
};
var blockly_model_Tooltip = $hxClasses["blockly.model.Tooltip"] = { __ename__ : ["blockly","model","Tooltip"], __constructs__ : ["Fixed","Computed"] };
blockly_model_Tooltip.Fixed = function(tooltip) { var $x = ["Fixed",0,tooltip]; $x.__enum__ = blockly_model_Tooltip; $x.toString = $estr; return $x; };
blockly_model_Tooltip.Computed = function(generator) { var $x = ["Computed",1,generator]; $x.__enum__ = blockly_model_Tooltip; $x.toString = $estr; return $x; };
var blockly_model_Validator = $hxClasses["blockly.model.Validator"] = { __ename__ : ["blockly","model","Validator"], __constructs__ : ["Callback","Clear"] };
blockly_model_Validator.Callback = function(fieldName,callback) { var $x = ["Callback",0,fieldName,callback]; $x.__enum__ = blockly_model_Validator; $x.toString = $estr; return $x; };
blockly_model_Validator.Clear = function(fieldName) { var $x = ["Clear",1,fieldName]; $x.__enum__ = blockly_model_Validator; $x.toString = $estr; return $x; };
var blockly_model_BlockColour = $hxClasses["blockly.model.BlockColour"] = { __ename__ : ["blockly","model","BlockColour"], __constructs__ : ["HSVColour","RGBColour"] };
blockly_model_BlockColour.HSVColour = function(value) { var $x = ["HSVColour",0,value]; $x.__enum__ = blockly_model_BlockColour; $x.toString = $estr; return $x; };
blockly_model_BlockColour.RGBColour = function(value) { var $x = ["RGBColour",1,value]; $x.__enum__ = blockly_model_BlockColour; $x.toString = $estr; return $x; };
var blockly_model_Inlining = $hxClasses["blockly.model.Inlining"] = { __ename__ : ["blockly","model","Inlining"], __constructs__ : ["Automatic","External","Internal"] };
blockly_model_Inlining.Automatic = ["Automatic",0];
blockly_model_Inlining.Automatic.toString = $estr;
blockly_model_Inlining.Automatic.__enum__ = blockly_model_Inlining;
blockly_model_Inlining.External = ["External",1];
blockly_model_Inlining.External.toString = $estr;
blockly_model_Inlining.External.__enum__ = blockly_model_Inlining;
blockly_model_Inlining.Internal = ["Internal",2];
blockly_model_Inlining.Internal.toString = $estr;
blockly_model_Inlining.Internal.__enum__ = blockly_model_Inlining;
var blockly_model_InputDef = $hxClasses["blockly.model.InputDef"] = { __ename__ : ["blockly","model","InputDef"], __constructs__ : ["Dummy","LabelledField","Value","Statement"] };
blockly_model_InputDef.Dummy = function(name,alignment,fields) { var $x = ["Dummy",0,name,alignment,fields]; $x.__enum__ = blockly_model_InputDef; $x.toString = $estr; return $x; };
blockly_model_InputDef.LabelledField = function(label,alignment,field) { var $x = ["LabelledField",1,label,alignment,field]; $x.__enum__ = blockly_model_InputDef; $x.toString = $estr; return $x; };
blockly_model_InputDef.Value = function(name,type,alignment,fields) { var $x = ["Value",2,name,type,alignment,fields]; $x.__enum__ = blockly_model_InputDef; $x.toString = $estr; return $x; };
blockly_model_InputDef.Statement = function(name,type,alignment,fields) { var $x = ["Statement",3,name,type,alignment,fields]; $x.__enum__ = blockly_model_InputDef; $x.toString = $estr; return $x; };
var blockly_model_FieldDef = $hxClasses["blockly.model.FieldDef"] = { __ename__ : ["blockly","model","FieldDef"], __constructs__ : ["TextLabel","StyledLabel","TextInput","SpellcheckedTextInput","Angle","DropDown","DropDownGen","Colour","CustomColours","CheckBox","Variable","Image","Numeric","DateSelect"] };
blockly_model_FieldDef.TextLabel = function(text) { var $x = ["TextLabel",0,text]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.StyledLabel = function(text,cssClass) { var $x = ["StyledLabel",1,text,cssClass]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.TextInput = function(name,text) { var $x = ["TextInput",2,name,text]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.SpellcheckedTextInput = function(name,text) { var $x = ["SpellcheckedTextInput",3,name,text]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.Angle = function(name,value) { var $x = ["Angle",4,name,value]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.DropDown = function(name,value,options) { var $x = ["DropDown",5,name,value,options]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.DropDownGen = function(name,value,generator) { var $x = ["DropDownGen",6,name,value,generator]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.Colour = function(name,value) { var $x = ["Colour",7,name,value]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.CustomColours = function(name,value,cols,colours) { var $x = ["CustomColours",8,name,value,cols,colours]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.CheckBox = function(name,value) { var $x = ["CheckBox",9,name,value]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.Variable = function(name,value) { var $x = ["Variable",10,name,value]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.Image = function(url,w,h,alt) { var $x = ["Image",11,url,w,h,alt]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.Numeric = function(name,value,min,max,precision) { var $x = ["Numeric",12,name,value,min,max,precision]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.DateSelect = function(name,date) { var $x = ["DateSelect",13,name,date]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
var blockly_model_ValueType = $hxClasses["blockly.model.ValueType"] = { __ename__ : ["blockly","model","ValueType"], __constructs__ : ["AnyType","BoolType","NumType","StringType","ListType","UnionType","CustomType"] };
blockly_model_ValueType.AnyType = ["AnyType",0];
blockly_model_ValueType.AnyType.toString = $estr;
blockly_model_ValueType.AnyType.__enum__ = blockly_model_ValueType;
blockly_model_ValueType.BoolType = ["BoolType",1];
blockly_model_ValueType.BoolType.toString = $estr;
blockly_model_ValueType.BoolType.__enum__ = blockly_model_ValueType;
blockly_model_ValueType.NumType = ["NumType",2];
blockly_model_ValueType.NumType.toString = $estr;
blockly_model_ValueType.NumType.__enum__ = blockly_model_ValueType;
blockly_model_ValueType.StringType = ["StringType",3];
blockly_model_ValueType.StringType.toString = $estr;
blockly_model_ValueType.StringType.__enum__ = blockly_model_ValueType;
blockly_model_ValueType.ListType = ["ListType",4];
blockly_model_ValueType.ListType.toString = $estr;
blockly_model_ValueType.ListType.__enum__ = blockly_model_ValueType;
blockly_model_ValueType.UnionType = function(types) { var $x = ["UnionType",5,types]; $x.__enum__ = blockly_model_ValueType; $x.toString = $estr; return $x; };
blockly_model_ValueType.CustomType = function(name) { var $x = ["CustomType",6,name]; $x.__enum__ = blockly_model_ValueType; $x.toString = $estr; return $x; };
var blockly_model_FieldAlignment = $hxClasses["blockly.model.FieldAlignment"] = { __ename__ : ["blockly","model","FieldAlignment"], __constructs__ : ["Left","Right","Center"] };
blockly_model_FieldAlignment.Left = ["Left",0];
blockly_model_FieldAlignment.Left.toString = $estr;
blockly_model_FieldAlignment.Left.__enum__ = blockly_model_FieldAlignment;
blockly_model_FieldAlignment.Right = ["Right",1];
blockly_model_FieldAlignment.Right.toString = $estr;
blockly_model_FieldAlignment.Right.__enum__ = blockly_model_FieldAlignment;
blockly_model_FieldAlignment.Center = ["Center",2];
blockly_model_FieldAlignment.Center.toString = $estr;
blockly_model_FieldAlignment.Center.__enum__ = blockly_model_FieldAlignment;
var blockly_model_ToolboxS12 = function() { };
$hxClasses["blockly.model.ToolboxS12"] = blockly_model_ToolboxS12;
blockly_model_ToolboxS12.__name__ = ["blockly","model","ToolboxS12"];
blockly_model_ToolboxS12.serialize = function(toolbox) {
	var root = Xml.createElement("xml");
	switch(toolbox[1]) {
	case 0:
		var items = toolbox[2];
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			root.addChild(blockly_model_ToolboxS12.serializeBlocks(item));
		}
		break;
	case 1:
		var items1 = toolbox[2];
		var _g1 = 0;
		while(_g1 < items1.length) {
			var item1 = items1[_g1];
			++_g1;
			root.addChild(blockly_model_ToolboxS12.serializeCategories(item1));
		}
		break;
	}
	return root;
};
blockly_model_ToolboxS12.serializeBlocks = function(block) {
	switch(block[1]) {
	case 0:
		var block1 = block[2];
		return blockly_model_WorkspaceS12.serializeBlock(block1);
	case 1:
		var text = block[2];
		var button = Xml.createElement("button");
		button.set("text",text);
		return button;
	case 2:
		var gap = block[2];
		var sep = Xml.createElement("sep");
		sep.set("gap","" + gap);
		return sep;
	}
};
blockly_model_ToolboxS12.serializeCategories = function(category) {
	switch(category[1]) {
	case 0:
		var blocks = category[5];
		var subcategories = category[4];
		var colour = category[3];
		var name = category[2];
		var cat = Xml.createElement("category");
		cat.set("name",name);
		if(colour != null) {
			cat.set("colour",colour);
		}
		var _g = 0;
		while(_g < blocks.length) {
			var block = blocks[_g];
			++_g;
			cat.addChild(blockly_model_ToolboxS12.serializeBlocks(block));
		}
		var _g1 = 0;
		while(_g1 < subcategories.length) {
			var subcat = subcategories[_g1];
			++_g1;
			cat.addChild(blockly_model_ToolboxS12.serializeCategories(subcat));
		}
		return cat;
	case 1:
		return Xml.createElement("sep");
	}
};
var blockly_model_WorkspaceS12 = function() { };
$hxClasses["blockly.model.WorkspaceS12"] = blockly_model_WorkspaceS12;
blockly_model_WorkspaceS12.__name__ = ["blockly","model","WorkspaceS12"];
blockly_model_WorkspaceS12.serializeBlock = function(block,isShadow) {
	if(isShadow == null) {
		isShadow = false;
	}
	switch(block[1]) {
	case 0:
		var fields = block[15];
		var inputs = block[14];
		var data = block[13];
		var next = block[12];
		var comment = block[11];
		var mutation = block[10];
		var deletable = block[9];
		var inlined = block[8];
		var movable = block[7];
		var editable = block[6];
		var collapsed = block[5];
		var disabled = block[4];
		var id = block[3];
		var type = block[2];
		var root = Xml.createElement(isShadow ? "shadow" : "block");
		root.set("type",type);
		if(id != null) {
			root.set("id",id);
		}
		if(disabled) {
			root.set("disabled","true");
		}
		if(collapsed) {
			root.set("collapsed","true");
		}
		if(!editable) {
			root.set("editable","false");
		}
		if(!movable) {
			root.set("movable","false");
		}
		if(!deletable) {
			root.set("deletable","false");
		}
		if(inlined) {
			root.set("inline","true");
		}
		if(mutation != null) {
			root.addChild(mutation);
		}
		if(fields != null) {
			var _g = 0;
			while(_g < fields.length) {
				var f = fields[_g];
				++_g;
				var field = Xml.createElement("field");
				field.set("name",f.name);
				field.addChild(Xml.createPCData(f.value));
				root.addChild(field);
			}
		}
		if(comment != null) {
			var comElem = Xml.createElement("comment");
			comElem.set("pinned",comment.pinned ? "true" : "false");
			comElem.set("w","" + comment.w);
			comElem.set("h","" + comment.h);
			comElem.addChild(Xml.createPCData(comment.text));
			root.addChild(comElem);
		}
		if(data != null) {
			var dataElem = Xml.createElement("data");
			dataElem.addChild(Xml.createPCData(data));
			root.addChild(dataElem);
		}
		if(inputs != null) {
			var _g1 = 0;
			while(_g1 < inputs.length) {
				var i = inputs[_g1];
				++_g1;
				switch(i[1]) {
				case 0:
					var shadow = i[4];
					var blk = i[3];
					var name = i[2];
					var value = Xml.createElement("value");
					value.set("name",name);
					if(shadow != null) {
						value.addChild(blockly_model_WorkspaceS12.serializeBlock(shadow,true));
					}
					if(blk != null) {
						value.addChild(blockly_model_WorkspaceS12.serializeBlock(blk,false));
					}
					root.addChild(value);
					break;
				case 1:
					var blk1 = i[3];
					var name1 = i[2];
					var statement = Xml.createElement("statement");
					statement.set("name",name1);
					if(blk1 != null) {
						statement.addChild(blockly_model_WorkspaceS12.serializeBlock(blk1,false));
					}
					root.addChild(statement);
					break;
				}
			}
		}
		if(next != null) {
			var nextElem = Xml.createElement("next");
			nextElem.addChild(blockly_model_WorkspaceS12.serializeBlock(next));
			root.addChild(nextElem);
		}
		return root;
	case 1:
		var type1 = block[2];
		return blockly_model_WorkspaceS12.serializeBlock(blockly_model_BlockModel.Block(type1,null,false,false,true,true,false,true,null,null,null,null,null,null),isShadow);
	case 2:
		var fields1 = block[4];
		var inputs1 = block[3];
		var type2 = block[2];
		return blockly_model_WorkspaceS12.serializeBlock(blockly_model_BlockModel.Block(type2,null,false,false,true,true,false,true,null,null,null,null,inputs1,fields1),isShadow);
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v3 = v;
				var k = v3.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v4 = v;
				var _g_head = v4.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i3 = _g11++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v["length"];
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i4 = _g12++;
				this.serialize(v[i4]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = ["haxe","ds","List"];
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = ["haxe","ds","_List","ListNode"];
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = ["haxe","xml","Printer"];
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		var _g = value.nodeType;
		switch(_g) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var input2 = StringTools.trim(value.nodeValue);
			this.output.b += Std.string(input2);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input3 = StringTools.trim(commentContent);
			this.output.b += Std.string(input3);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			var _g = child1.nodeType;
			switch(_g) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + child1.nodeType);
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if((o instanceof Array)) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if((o instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if((o instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if((arg1 instanceof js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if((arg.buffer instanceof js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Xml.Element = 0;
Xml.PCData = 1;
Xml.Document = 6;
app_DemoToolbox.toolbox = blockly_model_Toolbox.TreeToolbox([blockly_model_Categories.Category("Logic","210",[blockly_model_Categories.Category("Baz Bat","#ffff00",[],[blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("controls_if")),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("controls_repeat_ext")),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("math_number")),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("math_arithmetic"))])],[blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("controls_if")),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("logic_compare")),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("logic_operation")),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("logic_negate")),blockly_model_Blocks.Gap(45),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("logic_boolean")),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("logic_null")),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("logic_ternary"))]),blockly_model_Categories.Separator,blockly_model_Categories.Category("Foo Bar","140",[],[blockly_model_Blocks.Button("Configure ..."),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockMin("app.blocks.FooBarBlock",[blockly_model_InputModel.ValueInput("inp1",null,blockly_model_BlockModel.BlockType("app.blocks.DemoQuestions"))],null)),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("app.blocks.DemoQuestions")),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("app.blocks.KitchenSink")),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockType("text")),blockly_model_Blocks.Block(blockly_model_BlockModel.BlockMin("text_print",[blockly_model_InputModel.ValueInput("TEXT",null,blockly_model_BlockModel.BlockMin("text",null,[{ name : "TEXT", value : "abcd"}]))],null))])]);
app_blocks_KitchenSink.DEFAULT_COLOR = "#009900";
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
app_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
