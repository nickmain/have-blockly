// Generated by Haxe 3.3.0
(function () { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
Math.__name__ = ["Math"];
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var app_Main = function() {
	this.application = new blockly_BlocklyApp();
	this.application.registerBlock(app_blocks_FooBarBlock);
	this.application.registerBlock(app_blocks_DemoQuestions);
	this.application.registerBlock(app_blocks_KitchenSink);
	this.application.inject("blocklyArea",new blockly_BlocklyConfig().setMediaPath("media/").useToolboxId("toolbox").setGrid(new blockly_Grid()).setZoom(new blockly_Zoom()).showTrashcan(true));
	this.application.addSelectionChangeListener(function() {
		console.log("Selection Changed");
	});
	this.resultArea = window.document.getElementById("resultArea");
	this.application.loadWorkspaceFromLocalStorage("demo");
	Blockly.getMainWorkspace().addChangeListener($bind(this,this.workspaceChanged));
};
app_Main.__name__ = ["app","Main"];
app_Main.main = function() {
	app_Main.mainApp = new app_Main();
};
app_Main.prototype = {
	workspaceChanged: function() {
		console.log("workspaceChanged");
		this.application.workspaceToLocalStorage("demo");
		this.resultArea.innerText = this.application.workspaceToPrettyXML();
	}
};
var blockly_CustomBlock = function(block,application) {
	this.block = block;
	this.application = application;
};
blockly_CustomBlock.__name__ = ["blockly","CustomBlock"];
blockly_CustomBlock.fromBlock = function(block) {
	return block.haxeBlock;
};
blockly_CustomBlock.prototype = {
	validate: function() {
	}
	,domToMutation: function(xmlElement) {
	}
	,mutationToDom: function() {
		return null;
	}
	,decompose: function(workspace) {
		return null;
	}
	,compose: function(containerBlock) {
	}
	,onChange: function(event) {
	}
	,getPreviousBlock: function() {
		if(this.block.previousConnection == null) {
			return null;
		}
		return this.block.previousConnection.targetBlock();
	}
	,getOutputBlock: function() {
		if(this.block.outputConnection == null) {
			return null;
		}
		return this.block.outputConnection.targetBlock();
	}
	,getInputBlock: function(inputName) {
		var input = this.block.getInput(inputName);
		if(input == null) {
			return null;
		}
		return input.connection.targetBlock();
	}
	,attachBlock: function(inputName,blockType) {
		var input = this.block.getInput(inputName);
		var newBlock = this.block.workspace.newBlock(blockType);
		input.connection.connect(newBlock.outputConnection);
		newBlock.initSvg();
		newBlock.render(true);
		return newBlock;
	}
	,detachBlock: function(inputName) {
		var otherBlock = this.getInputBlock(inputName);
		if(otherBlock != null) {
			otherBlock.unplug(true,true);
		}
		return otherBlock;
	}
	,appendLabelledField: function(label,field,fieldName,inputName) {
		return this.block.appendDummyInput(inputName).appendField(label).appendField(field,fieldName);
	}
	,appendField: function(field,fieldName) {
		return this.block.appendDummyInput().appendField(field,fieldName);
	}
};
var app_blocks_DemoQuestions = function(block,application) {
	var _gthis = this;
	blockly_CustomBlock.call(this,block,application);
	block.setColour("#ff0000");
	block.setOutput(true);
	block.setTooltip("Some possible choices");
	this.appendLabelledField("You can choose this",new Blockly.FieldCheckbox("FALSE",function(newValue) {
		if(newValue) {
			_gthis.appendLabelledField("Controlled by first checkbox",new Blockly.FieldCheckbox("FALSE",null),"check5","input5").setAlign(Blockly.ALIGN_RIGHT);
		} else {
			block.removeInput("input5",true);
		}
		return newValue;
	}),"check1").setAlign(Blockly.ALIGN_RIGHT);
	this.appendLabelledField("You can also choose this",new Blockly.FieldCheckbox("TRUE",null),"check2").setAlign(Blockly.ALIGN_RIGHT);
	this.appendLabelledField("This is another option",new Blockly.FieldCheckbox("FALSE",null),"check3").setAlign(Blockly.ALIGN_RIGHT);
	this.appendLabelledField("Or you can choose this one",new Blockly.FieldCheckbox("FALSE",null),"check4").setAlign(Blockly.ALIGN_RIGHT);
};
app_blocks_DemoQuestions.__name__ = ["app","blocks","DemoQuestions"];
app_blocks_DemoQuestions.__super__ = blockly_CustomBlock;
app_blocks_DemoQuestions.prototype = $extend(blockly_CustomBlock.prototype,{
});
var app_blocks_FooBarBlock = function(block,application) {
	this.count = 1;
	var _gthis = this;
	blockly_CustomBlock.call(this,block,application);
	console.log("hello world");
	this.count = 1;
	block.setColour("#cc88ff");
	block.setPreviousStatement(false);
	block.setNextStatement(true);
	block.setTooltip(function() {
		return "Hello World !\nThis is going to be interesting\n" + _gthis.count++;
	});
	block.appendDummyInput().appendField(new Blockly.FieldCheckbox("FALSE"),"check").appendField("Hello World");
	block.appendStatementInput("stat1");
	block.appendValueInput("inp1").appendField(new Blockly.FieldLabel("Hello World","svgDarkText"),null);
};
app_blocks_FooBarBlock.__name__ = ["app","blocks","FooBarBlock"];
app_blocks_FooBarBlock.__super__ = blockly_CustomBlock;
app_blocks_FooBarBlock.prototype = $extend(blockly_CustomBlock.prototype,{
});
var app_blocks_KitchenSink = function(block,application) {
	this.hasOut = true;
	this.hasPrev = true;
	blockly_CustomBlock.call(this,block,application);
	this.builder = new blockly_model_BlockBuilder(block);
	this.builder.build({ connections : { topType : blockly_model_ValueType.AnyType, bottomType : blockly_model_ValueType.AnyType, outType : blockly_model_ValueType.BoolType}, inlining : blockly_model_Inlining.Automatic, colour : blockly_model_BlockColour.RGBColour("#009900"), tooltip : "All fields except the kitchen sink", warning : "There are things yet to do !", help : "http://blog.nickmain.com", inputs : [blockly_model_InputDef.Dummy("toprow",blockly_model_FieldAlignment.Left,[]),blockly_model_InputDef.Dummy("image",blockly_model_FieldAlignment.Center,[blockly_model_FieldDef.Image("haxe.png",100,25,"Haxe Logo")]),blockly_model_InputDef.LabelledField("A Checkbox",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.CheckBox("check1",false)),blockly_model_InputDef.LabelledField("Text Field",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.TextInput("text1","some text")),blockly_model_InputDef.LabelledField("Spellchecked",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.SpellcheckedTextInput("textspell","some text")),blockly_model_InputDef.LabelledField("Even 0..10",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.Numeric("numfield",2,0,10,2)),blockly_model_InputDef.LabelledField("Angle Field",blockly_model_FieldAlignment.Left,blockly_model_FieldDef.Angle("angle1",45)),blockly_model_InputDef.LabelledField("Colour",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.Colour("color1","#ffff00")),blockly_model_InputDef.LabelledField("Custom Colours",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.CustomColours("color2","#ffd700",3,["#ffffe0","#ffff00","#ffd700","#eedd82","#daa520","#b8860b"])),blockly_model_InputDef.LabelledField("Drop Down Menu",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.DropDown("menu1","BAR",[["foo","FOO"],["bar","BAR"],["bat","BAT"]])),blockly_model_InputDef.LabelledField("Generated Menu",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.DropDownGen("menu2",null,$bind(this,this.randomMenu))),blockly_model_InputDef.LabelledField("Variable",blockly_model_FieldAlignment.Right,blockly_model_FieldDef.Variable("var1","foo")),blockly_model_InputDef.Value("input1",blockly_model_ValueType.AnyType,blockly_model_FieldAlignment.Right,[blockly_model_FieldDef.CheckBox("checkX",false)])], validators : [blockly_model_Validator.Callback("checkX",$bind(this,this.funkyCheckInput))]});
	block.setCommentText("Everything but the kitchen sink.");
	block.data = "This is some metadata";
	block.setDeletable(true);
	block.setMutator(new Blockly.Mutator(["controls_if_elseif","controls_if_else"]));
};
app_blocks_KitchenSink.__name__ = ["app","blocks","KitchenSink"];
app_blocks_KitchenSink.__super__ = blockly_CustomBlock;
app_blocks_KitchenSink.prototype = $extend(blockly_CustomBlock.prototype,{
	funkyCheckInput: function(checked) {
		if(checked) {
			var inputBlock = this.getInputBlock("input1");
			if(inputBlock == null) {
				inputBlock = this.attachBlock("input1","text");
				inputBlock.setFieldValue("Hello World","TEXT");
			}
		} else {
			var inputBlock1 = this.detachBlock("input1");
			if(inputBlock1 != null) {
				inputBlock1.setWarningText("Unplugged - discard at your leisure");
				inputBlock1.warning.setVisible(true);
				inputBlock1.setDisabled(true);
			}
		}
		return checked;
	}
	,randomMenu: function() {
		var opts = [];
		var _g = 0;
		while(_g < 5) {
			++_g;
			var opt = "# " + Math.round(Math.random() * 1000);
			opts.push([opt,opt]);
		}
		console.log(opts.toString());
		return opts;
	}
	,checkboxChanged: function(state) {
		var req = new XMLHttpRequest();
		req.overrideMimeType("text/xml");
		req.open("POST","http://127.0.0.1:5000/save",true);
		req.send(this.application.workspaceToPrettyXML());
		return state;
	}
	,onChange: function(event) {
		if(this.getPreviousBlock() != null) {
			this.builder.setConnections({ topType : blockly_model_ValueType.AnyType, bottomType : blockly_model_ValueType.AnyType, outType : null});
			this.hasOut = false;
			this.hasPrev = true;
		} else if(this.getOutputBlock() != null) {
			this.builder.setConnections({ topType : null, bottomType : blockly_model_ValueType.AnyType, outType : blockly_model_ValueType.BoolType});
			this.hasOut = true;
			this.hasPrev = false;
		} else {
			this.builder.setConnections({ topType : blockly_model_ValueType.AnyType, bottomType : blockly_model_ValueType.AnyType, outType : blockly_model_ValueType.BoolType});
			this.hasOut = true;
			this.hasPrev = true;
		}
	}
	,domToMutation: function(e) {
		this.hasPrev = e.getAttribute("has_prev") == "true";
		this.hasOut = e.getAttribute("has_out") == "true";
		this.builder.setConnections({ topType : this.hasPrev?blockly_model_ValueType.AnyType:null, bottomType : blockly_model_ValueType.AnyType, outType : this.hasOut?blockly_model_ValueType.BoolType:null});
	}
	,mutationToDom: function() {
		var container = window.document.createElement("mutation");
		container.setAttribute("has_prev","" + Std.string(this.hasPrev));
		container.setAttribute("has_out","" + Std.string(this.hasOut));
		return container;
	}
	,decompose: function(workspace) {
		var containerBlock = workspace.newBlock("app.blocks.FooBarBlock");
		containerBlock.initSvg();
		return containerBlock;
	}
});
var blockly_BlocklyApp = function() {
};
blockly_BlocklyApp.__name__ = ["blockly","BlocklyApp"];
blockly_BlocklyApp.prototype = {
	inject: function(divId,config) {
		this.divId = divId;
		this.workspace = Blockly.inject(divId,config);
	}
	,addSelectionChangeListener: function(callback) {
		var blocklyDiv = window.document.getElementById(this.divId);
		if(blocklyDiv != null) {
			blocklyDiv.addEventListener("blocklySelectChange",function(e) {
				callback();
			},false);
		}
	}
	,workspaceToPrettyXML: function() {
		return Blockly.Xml.domToPrettyText(Blockly.Xml.workspaceToDom(this.workspace));
	}
	,workspaceToLocalStorage: function(key) {
		var xml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(this.workspace));
		window.localStorage.setItem(key,xml);
		return xml;
	}
	,loadWorkspaceFromLocalStorage: function(key) {
		var xml = window.localStorage.getItem(key);
		if(xml == null) {
			return false;
		}
		Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(xml),this.workspace);
		return true;
	}
	,registerBlock: function(clazz) {
		var blocklyApp = this;
		Blockly.Blocks[Type.getClassName(clazz)] = { init : function() {
			this.haxeBlock = new clazz(this,blocklyApp);
		}, validate : function() {
			var haxeBlock = this.haxeBlock;
			haxeBlock.validate();
		}, domToMutation : function(xmlElement) {
			var haxeBlock1 = this.haxeBlock;
			haxeBlock1.domToMutation(xmlElement);
		}, mutationToDom : function() {
			var haxeBlock2 = this.haxeBlock;
			return haxeBlock2.mutationToDom();
		}, decompose : function(workspace) {
			var haxeBlock3 = this.haxeBlock;
			return haxeBlock3.decompose(workspace);
		}, compose : function(containerBlock) {
			var haxeBlock4 = this.haxeBlock;
			haxeBlock4.compose(containerBlock);
		}, onchange : function(event) {
			var haxeBlock5 = this.haxeBlock;
			haxeBlock5.onChange(event);
		}};
	}
};
var blockly_Grid = function() {
	this.snap = true;
	this.colour = "#ccc";
	this.length = 3;
	this.spacing = 20;
};
blockly_Grid.__name__ = ["blockly","Grid"];
var blockly_Zoom = function() {
	this.scaleSpeed = 1.2;
	this.minScale = 0.3;
	this.maxScale = 3;
	this.startScale = 1.0;
	this.wheel = true;
	this.controls = true;
};
blockly_Zoom.__name__ = ["blockly","Zoom"];
var blockly_BlocklyConfig = function() {
};
blockly_BlocklyConfig.__name__ = ["blockly","BlocklyConfig"];
blockly_BlocklyConfig.prototype = {
	setMediaPath: function(path) {
		this.media = path;
		return this;
	}
	,setGrid: function(grid) {
		this.grid = grid;
		return this;
	}
	,showTrashcan: function(show) {
		this.trashcan = show;
		return this;
	}
	,setZoom: function(zoom) {
		this.zoom = zoom;
		return this;
	}
	,useToolboxId: function(id) {
		this.toolbox = window.document.getElementById(id);
		return this;
	}
};
var blockly_model_BlockBuilder = function(block) {
	this.block = block;
};
blockly_model_BlockBuilder.__name__ = ["blockly","model","BlockBuilder"];
blockly_model_BlockBuilder.prototype = {
	build: function(def) {
		this.setConnections(def.connections);
		var _g = def.inlining;
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = null;
			break;
		case 1:
			tmp = false;
			break;
		case 2:
			tmp = true;
			break;
		}
		this.block.setInputsInline(tmp);
		var _g1 = def.colour;
		switch(_g1[1]) {
		case 0:
			this.block.setColour(_g1[2]);
			break;
		case 1:
			this.block.setColour(_g1[2]);
			break;
		}
		this.block.setTooltip(def.tooltip);
		this.block.setWarningText(def.warning);
		this.block.setHelpUrl(def.help);
		this.addInputs(def.inputs);
		this.addValidators(def.validators);
	}
	,setConnections: function(connections) {
		if(connections == null) {
			this.block.setPreviousStatement(false);
			this.block.setNextStatement(false);
			this.block.setOutput(false);
			return;
		}
		if(connections.topType != null) {
			this.block.setPreviousStatement(true,this.typeString(connections.topType));
		} else {
			this.block.setPreviousStatement(false);
		}
		if(connections.bottomType != null) {
			this.block.setNextStatement(true,this.typeString(connections.bottomType));
		} else {
			this.block.setNextStatement(false);
		}
		if(connections.outType != null) {
			this.block.setOutput(true,this.typeString(connections.outType));
		} else {
			this.block.setOutput(false);
		}
	}
	,addValidators: function(validators) {
		var _g = 0;
		while(_g < validators.length) {
			var v = validators[_g];
			++_g;
			switch(v[1]) {
			case 0:
				var callback = v[3];
				var f = this.block.getField(v[2]);
				if(f != null) {
					f.setValidator(callback);
				}
				break;
			case 1:
				var f1 = this.block.getField(v[2]);
				if(f1 != null) {
					f1.setValidator(null);
				}
				break;
			}
		}
	}
	,addInputs: function(inputs) {
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			switch(input[1]) {
			case 0:
				var i = this.block.appendDummyInput(input[2]);
				i.setAlign(this.fieldAlignment(input[3]));
				this.addFields(i,input[4]);
				break;
			case 1:
				var field = this.createField(input[4]);
				var i1 = this.block.appendDummyInput(field.name);
				i1.setAlign(this.fieldAlignment(input[3]));
				i1.appendField(input[2]);
				i1.appendField(field.field,field.name);
				break;
			case 2:
				var i2 = this.block.appendValueInput(input[2]);
				i2.setAlign(this.fieldAlignment(input[4]));
				i2.setCheck(this.typeString(input[3]));
				this.addFields(i2,input[5]);
				break;
			case 3:
				var i3 = this.block.appendStatementInput(input[2]);
				i3.setAlign(this.fieldAlignment(input[4]));
				i3.setCheck(this.typeString(input[3]));
				this.addFields(i3,input[5]);
				break;
			}
		}
	}
	,addFields: function(input,fields) {
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var f = this.createField(field);
			input.appendField(f.field,f.name);
		}
	}
	,createField: function(field) {
		switch(field[1]) {
		case 0:
			return { name : null, field : new Blockly.FieldLabel(field[2],field[3])};
		case 1:
			return { name : field[2], field : new Blockly.FieldTextInput(field[3])};
		case 2:
			var text = field[3];
			var name = field[2];
			var f = new Blockly.FieldTextInput(text);
			f.setSpellcheck(true);
			return { name : name, field : f};
		case 3:
			return { name : field[2], field : new Blockly.FieldAngle("" + field[3])};
		case 4:
			var options = field[4];
			var value = field[3];
			var name1 = field[2];
			var f1 = new Blockly.FieldDropdown(options);
			if(value != null) {
				f1.setValue(value);
			}
			return { name : name1, field : f1};
		case 5:
			var generator = field[4];
			var value1 = field[3];
			var name2 = field[2];
			var f2 = new Blockly.FieldDropdown(generator);
			if(value1 != null) {
				f2.setValue(value1);
			}
			return { name : name2, field : f2};
		case 6:
			return { name : field[2], field : new Blockly.FieldColour(field[3])};
		case 7:
			var colours = field[5];
			var cols = field[4];
			var value2 = field[3];
			var name3 = field[2];
			var f3 = new Blockly.FieldColour(value2);
			f3.setColumns(cols);
			f3.setColours(colours);
			return { name : name3, field : f3};
		case 8:
			return { name : field[2], field : new Blockly.FieldCheckbox(field[3]?"TRUE":"FALSE")};
		case 9:
			return { name : field[2], field : new Blockly.FieldVariable(field[3])};
		case 10:
			return { name : null, field : new Blockly.FieldImage(field[2],field[3],field[4],field[5])};
		case 11:
			return { name : field[2], field : new Blockly.FieldNumber(field[3],field[4],field[5],field[6])};
		case 12:
			return { name : field[2], field : new Blockly.FieldDate(field[3])};
		}
	}
	,fieldAlignment: function(alignment) {
		switch(alignment[1]) {
		case 0:
			return Blockly.ALIGN_LEFT;
		case 1:
			return Blockly.ALIGN_RIGHT;
		case 2:
			return Blockly.ALIGN_CENTRE;
		}
	}
	,typeString: function(type) {
		switch(type[1]) {
		case 0:
			return null;
		case 1:
			return "Boolean";
		case 2:
			return "Number";
		case 3:
			return "String";
		case 4:
			return "Array";
		case 5:
			var types = type[2];
			var _g = [];
			var _g1 = 0;
			while(_g1 < types.length) {
				var t = types[_g1];
				++_g1;
				_g.push(this.typeString(t));
			}
			return _g;
		case 6:
			return type[2];
		}
	}
};
var blockly_model_Validator = { __ename__ : true, __constructs__ : ["Callback","Clear"] };
blockly_model_Validator.Callback = function(fieldName,callback) { var $x = ["Callback",0,fieldName,callback]; $x.__enum__ = blockly_model_Validator; $x.toString = $estr; return $x; };
blockly_model_Validator.Clear = function(fieldName) { var $x = ["Clear",1,fieldName]; $x.__enum__ = blockly_model_Validator; $x.toString = $estr; return $x; };
var blockly_model_BlockColour = { __ename__ : true, __constructs__ : ["HSVColour","RGBColour"] };
blockly_model_BlockColour.HSVColour = function(value) { var $x = ["HSVColour",0,value]; $x.__enum__ = blockly_model_BlockColour; $x.toString = $estr; return $x; };
blockly_model_BlockColour.RGBColour = function(value) { var $x = ["RGBColour",1,value]; $x.__enum__ = blockly_model_BlockColour; $x.toString = $estr; return $x; };
var blockly_model_Inlining = { __ename__ : true, __constructs__ : ["Automatic","External","Internal"] };
blockly_model_Inlining.Automatic = ["Automatic",0];
blockly_model_Inlining.Automatic.toString = $estr;
blockly_model_Inlining.Automatic.__enum__ = blockly_model_Inlining;
blockly_model_Inlining.External = ["External",1];
blockly_model_Inlining.External.toString = $estr;
blockly_model_Inlining.External.__enum__ = blockly_model_Inlining;
blockly_model_Inlining.Internal = ["Internal",2];
blockly_model_Inlining.Internal.toString = $estr;
blockly_model_Inlining.Internal.__enum__ = blockly_model_Inlining;
var blockly_model_InputDef = { __ename__ : true, __constructs__ : ["Dummy","LabelledField","Value","Statement"] };
blockly_model_InputDef.Dummy = function(name,alignment,fields) { var $x = ["Dummy",0,name,alignment,fields]; $x.__enum__ = blockly_model_InputDef; $x.toString = $estr; return $x; };
blockly_model_InputDef.LabelledField = function(label,alignment,field) { var $x = ["LabelledField",1,label,alignment,field]; $x.__enum__ = blockly_model_InputDef; $x.toString = $estr; return $x; };
blockly_model_InputDef.Value = function(name,type,alignment,fields) { var $x = ["Value",2,name,type,alignment,fields]; $x.__enum__ = blockly_model_InputDef; $x.toString = $estr; return $x; };
blockly_model_InputDef.Statement = function(name,type,alignment,fields) { var $x = ["Statement",3,name,type,alignment,fields]; $x.__enum__ = blockly_model_InputDef; $x.toString = $estr; return $x; };
var blockly_model_FieldDef = { __ename__ : true, __constructs__ : ["TextLabel","TextInput","SpellcheckedTextInput","Angle","DropDown","DropDownGen","Colour","CustomColours","CheckBox","Variable","Image","Numeric","DateSelect"] };
blockly_model_FieldDef.TextLabel = function(text,cssClass) { var $x = ["TextLabel",0,text,cssClass]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.TextInput = function(name,text) { var $x = ["TextInput",1,name,text]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.SpellcheckedTextInput = function(name,text) { var $x = ["SpellcheckedTextInput",2,name,text]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.Angle = function(name,value) { var $x = ["Angle",3,name,value]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.DropDown = function(name,value,options) { var $x = ["DropDown",4,name,value,options]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.DropDownGen = function(name,value,generator) { var $x = ["DropDownGen",5,name,value,generator]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.Colour = function(name,value) { var $x = ["Colour",6,name,value]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.CustomColours = function(name,value,cols,colours) { var $x = ["CustomColours",7,name,value,cols,colours]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.CheckBox = function(name,value) { var $x = ["CheckBox",8,name,value]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.Variable = function(name,value) { var $x = ["Variable",9,name,value]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.Image = function(url,w,h,alt) { var $x = ["Image",10,url,w,h,alt]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.Numeric = function(name,value,min,max,precision) { var $x = ["Numeric",11,name,value,min,max,precision]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
blockly_model_FieldDef.DateSelect = function(name,date) { var $x = ["DateSelect",12,name,date]; $x.__enum__ = blockly_model_FieldDef; $x.toString = $estr; return $x; };
var blockly_model_ValueType = { __ename__ : true, __constructs__ : ["AnyType","BoolType","NumType","StringType","ListType","UnionType","CustomType"] };
blockly_model_ValueType.AnyType = ["AnyType",0];
blockly_model_ValueType.AnyType.toString = $estr;
blockly_model_ValueType.AnyType.__enum__ = blockly_model_ValueType;
blockly_model_ValueType.BoolType = ["BoolType",1];
blockly_model_ValueType.BoolType.toString = $estr;
blockly_model_ValueType.BoolType.__enum__ = blockly_model_ValueType;
blockly_model_ValueType.NumType = ["NumType",2];
blockly_model_ValueType.NumType.toString = $estr;
blockly_model_ValueType.NumType.__enum__ = blockly_model_ValueType;
blockly_model_ValueType.StringType = ["StringType",3];
blockly_model_ValueType.StringType.toString = $estr;
blockly_model_ValueType.StringType.__enum__ = blockly_model_ValueType;
blockly_model_ValueType.ListType = ["ListType",4];
blockly_model_ValueType.ListType.toString = $estr;
blockly_model_ValueType.ListType.__enum__ = blockly_model_ValueType;
blockly_model_ValueType.UnionType = function(types) { var $x = ["UnionType",5,types]; $x.__enum__ = blockly_model_ValueType; $x.toString = $estr; return $x; };
blockly_model_ValueType.CustomType = function(name) { var $x = ["CustomType",6,name]; $x.__enum__ = blockly_model_ValueType; $x.toString = $estr; return $x; };
var blockly_model_FieldAlignment = { __ename__ : true, __constructs__ : ["Left","Right","Center"] };
blockly_model_FieldAlignment.Left = ["Left",0];
blockly_model_FieldAlignment.Left.toString = $estr;
blockly_model_FieldAlignment.Left.__enum__ = blockly_model_FieldAlignment;
blockly_model_FieldAlignment.Right = ["Right",1];
blockly_model_FieldAlignment.Right.toString = $estr;
blockly_model_FieldAlignment.Right.__enum__ = blockly_model_FieldAlignment;
blockly_model_FieldAlignment.Center = ["Center",2];
blockly_model_FieldAlignment.Center.toString = $estr;
blockly_model_FieldAlignment.Center.__enum__ = blockly_model_FieldAlignment;
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = ["String"];
Array.__name__ = ["Array"];
app_Main.main();
})();
